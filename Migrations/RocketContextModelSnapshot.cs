// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RocketElevator.Models;

namespace RocketElevator.Migrations
{
    [DbContext(typeof(RocketContext))]
    partial class RocketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("RocketElevator.Models.Addresses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long?>("BuildingId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("building_id");

                    b.Property<string>("City")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Entity")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("entity");

                    b.Property<float?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<float?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notes");

                    b.Property<string>("NumberAndStreet")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("number_and_street");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.Property<string>("SuiteOrApartment")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("suite_or_apartment");

                    b.Property<string>("TypeOfAddress")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type_of_address");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("index_addresses_on_building_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("index_addresses_on_customer_id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("RocketElevator.Models.ArInternalMetadata", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("PRIMARY");

                    b.ToTable("ar_internal_metadata");
                });

            modelBuilder.Entity("RocketElevator.Models.Batteries", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<string>("BatteryStatus")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("battery_status");

                    b.Property<string>("BatteryType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("battery_type");

                    b.Property<long?>("BuildingId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("building_id");

                    b.Property<string>("CertificateOfOperations")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("certificate_of_operations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfCommissioning")
                        .HasColumnType("date")
                        .HasColumnName("date_of_commissioning");

                    b.Property<DateTime?>("DateOfLastInspection")
                        .HasColumnType("date")
                        .HasColumnName("date_of_last_inspection");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("employee_id");

                    b.Property<string>("Information")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("information");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("index_batteries_on_building_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("index_batteries_on_employee_id");

                    b.ToTable("batteries");
                });

            modelBuilder.Entity("RocketElevator.Models.BuildingDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long?>("BuildingId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("building_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("InformationKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("information_key");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("index_building_details_on_building_id");

                    b.ToTable("building_details");
                });

            modelBuilder.Entity("RocketElevator.Models.Buildings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("address_id");

                    b.Property<long?>("AdminContactId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("admin_contact_id");

                    b.Property<string>("AdministratorEmail")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("administrator_email");

                    b.Property<string>("AdministratorFullName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("administrator_full_name");

                    b.Property<string>("AdministratorPhoneNumber")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("administrator_phone_number");

                    b.Property<long?>("BuildingDetailId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("building_detail_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("customer_id");

                    b.Property<string>("TechnicalContactEmail")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("technical_contact_email");

                    b.Property<string>("TechnicalContactFullName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("technical_contact_full_name");

                    b.Property<long?>("TechnicalContactId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("technical_contact_id");

                    b.Property<string>("TechnicalContactPhone")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("technical_contact_phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("index_buildings_on_address_id");

                    b.HasIndex("AdminContactId")
                        .HasDatabaseName("index_buildings_on_admin_contact_id");

                    b.HasIndex("BuildingDetailId")
                        .HasDatabaseName("index_buildings_on_building_detail_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("index_buildings_on_customer_id");

                    b.HasIndex("TechnicalContactId")
                        .HasDatabaseName("index_buildings_on_technical_contact_id");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("RocketElevator.Models.Columns", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long?>("BatteryId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("battery_id");

                    b.Property<string>("ColumnStatus")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("column_status");

                    b.Property<string>("ColumnType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("column_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Information")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("information");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notes");

                    b.Property<int?>("NumberOfFloorsServed")
                        .HasColumnType("int(11)")
                        .HasColumnName("number_of_floors_served");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BatteryId")
                        .HasDatabaseName("index_columns_on_battery_id");

                    b.ToTable("columns");
                });

            modelBuilder.Entity("RocketElevator.Models.Customers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("address_id");

                    b.Property<string>("CompanyContactEmail")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_contact_email");

                    b.Property<string>("CompanyContactFullName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_contact_full_name");

                    b.Property<string>("CompanyContactPhone")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_contact_phone");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_description");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("TechnicalAuthorityFullName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("technical_authority_full_name");

                    b.Property<string>("TechnicalAuthorityPhoneNumber")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("technical_authority_phone_number");

                    b.Property<string>("TechnicalManagerEmailService")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("technical_manager_email_service");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("index_customers_on_address_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_customers_on_user_id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("RocketElevator.Models.Elevators", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<string>("CertificateOfInspection")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("certificate_of_inspection");

                    b.Property<long?>("ColumnId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("column_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfCommissioning")
                        .HasColumnType("date")
                        .HasColumnName("date_of_commissioning");

                    b.Property<DateTime?>("DateOfLastInspection")
                        .HasColumnType("date")
                        .HasColumnName("date_of_last_inspection");

                    b.Property<string>("ElevatorModel")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("elevator_model");

                    b.Property<string>("ElevatorStatus")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("elevator_status");

                    b.Property<string>("ElevatorType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("elevator_type");

                    b.Property<string>("Information")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("information");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notes");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("serial_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId")
                        .HasDatabaseName("index_elevators_on_column_id");

                    b.ToTable("elevators");
                });

            modelBuilder.Entity("RocketElevator.Models.Employees", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("Function")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("function");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_employees_on_user_id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("RocketElevator.Models.Interventions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<int>("Author")
                        .HasColumnType("int(11)")
                        .HasColumnName("author");

                    b.Property<int?>("BatteryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("battery_id");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int(11)")
                        .HasColumnName("building_id");

                    b.Property<int?>("ColumnId")
                        .HasColumnType("int(11)")
                        .HasColumnName("column_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("customer_id");

                    b.Property<int?>("ElevatorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("elevator_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("EndIntervention")
                        .HasColumnType("datetime")
                        .HasColumnName("end_intervention");

                    b.Property<string>("Report")
                        .HasColumnType("text")
                        .HasColumnName("report");

                    b.Property<string>("Result")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("result")
                        .HasDefaultValueSql("'Incomplete'");

                    b.Property<DateTime?>("StartIntervention")
                        .HasColumnType("datetime")
                        .HasColumnName("start_intervention");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Pending'");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("interventions");
                });

            modelBuilder.Entity("RocketElevator.Models.Leads", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<string>("Attachment")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("attachment");

                    b.Property<string>("BusinessName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("business_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Department")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("text")
                        .HasColumnName("project_description");

                    b.Property<string>("ProjectName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("project_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_leads_on_user_id");

                    b.ToTable("leads");
                });

            modelBuilder.Entity("RocketElevator.Models.Quotes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<int?>("Apartments")
                        .HasColumnType("int(11)")
                        .HasColumnName("apartments");

                    b.Property<int?>("Basements")
                        .HasColumnType("int(11)")
                        .HasColumnName("basements");

                    b.Property<string>("BuildingType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("building_type");

                    b.Property<int?>("Businesses")
                        .HasColumnType("int(11)")
                        .HasColumnName("businesses");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("ElevatorNumber")
                        .HasColumnType("int(11)")
                        .HasColumnName("elevator_number");

                    b.Property<int?>("ElevatorShafts")
                        .HasColumnType("int(11)")
                        .HasColumnName("elevator_shafts");

                    b.Property<int?>("Floors")
                        .HasColumnType("int(11)")
                        .HasColumnName("floors");

                    b.Property<decimal?>("InstallFee")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("install_fee");

                    b.Property<int?>("Occupants")
                        .HasColumnType("int(11)")
                        .HasColumnName("occupants");

                    b.Property<int?>("OpeningHours")
                        .HasColumnType("int(11)")
                        .HasColumnName("opening_hours");

                    b.Property<int?>("ParkingSpaces")
                        .HasColumnType("int(11)")
                        .HasColumnName("parking_spaces");

                    b.Property<string>("ProductLine")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_line");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("total_price");

                    b.Property<int?>("UnitPrice")
                        .HasColumnType("int(11)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_quotes_on_user_id");

                    b.ToTable("quotes");
                });

            modelBuilder.Entity("RocketElevator.Models.SchemaMigrations", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("version");

                    b.HasKey("Version")
                        .HasName("PRIMARY");

                    b.ToTable("schema_migrations");
                });

            modelBuilder.Entity("RocketElevator.Models.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("encrypted_password")
                        .HasDefaultValueSql("''");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_admin")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("IsEmployee")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_employee")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("IsUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_user")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("RememberCreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("remember_created_at");

                    b.Property<DateTime?>("ResetPasswordSentAt")
                        .HasColumnType("datetime")
                        .HasColumnName("reset_password_sent_at");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reset_password_token");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("index_users_on_email");

                    b.HasIndex("ResetPasswordToken")
                        .IsUnique()
                        .HasDatabaseName("index_users_on_reset_password_token");

                    b.ToTable("users");
                });

            modelBuilder.Entity("RocketElevator.Models.Addresses", b =>
                {
                    b.HasOne("RocketElevator.Models.Buildings", "Building")
                        .WithMany("Addresses")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_rails_a9ab2347cc");

                    b.HasOne("RocketElevator.Models.Customers", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_rails_d5f9efddd3");

                    b.Navigation("Building");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RocketElevator.Models.BuildingDetails", b =>
                {
                    b.HasOne("RocketElevator.Models.Buildings", "Building")
                        .WithMany("BuildingDetails")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_rails_51749f8eac");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("RocketElevator.Models.Buildings", b =>
                {
                    b.HasOne("RocketElevator.Models.Employees", "AdminContact")
                        .WithMany("BuildingsAdminContact")
                        .HasForeignKey("AdminContactId")
                        .HasConstraintName("fk_rails_6f76cebe7f");

                    b.HasOne("RocketElevator.Models.Employees", "TechnicalContact")
                        .WithMany("BuildingsTechnicalContact")
                        .HasForeignKey("TechnicalContactId")
                        .HasConstraintName("fk_rails_f7dd45df76");

                    b.Navigation("AdminContact");

                    b.Navigation("TechnicalContact");
                });

            modelBuilder.Entity("RocketElevator.Models.Buildings", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BuildingDetails");
                });

            modelBuilder.Entity("RocketElevator.Models.Customers", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RocketElevator.Models.Employees", b =>
                {
                    b.Navigation("BuildingsAdminContact");

                    b.Navigation("BuildingsTechnicalContact");
                });
#pragma warning restore 612, 618
        }
    }
}
